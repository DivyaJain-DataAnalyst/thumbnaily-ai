FROM node:20-alpine AS base

# Install dependencies
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package.json files and workspace configs for dependency resolution
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/web/package.json ./apps/web/
COPY packages/db/package.json ./packages/db/
COPY packages/types/package.json ./packages/types/
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY packages/ui/package.json ./packages/ui/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source files
COPY packages/db ./packages/db
COPY packages/types ./packages/types
COPY packages/ui ./packages/ui
COPY apps/web ./apps/web

# Generate Prisma client
WORKDIR /app/packages/db
RUN npx prisma generate

# Set working directory back to web app
WORKDIR /app/apps/web

# For development mode
FROM base AS development
ENV NODE_ENV=development
CMD ["pnpm", "docker:dev"]

# For production build
FROM base AS production-build
ENV NODE_ENV=production
RUN pnpm build

# Production runtime
FROM node:20-alpine AS production
WORKDIR /app

# Copy built app from previous stage
COPY --from=production-build /app/apps/web/.next ./.next
COPY --from=production-build /app/apps/web/public ./public
COPY --from=production-build /app/apps/web/package.json ./
COPY --from=production-build /app/apps/web/next.config.js ./
COPY --from=production-build /app/node_modules ./node_modules
COPY --from=production-build /app/packages ./packages

# Set environment variables
ENV NODE_ENV=production

# Start the app
CMD ["pnpm", "docker:prod"]